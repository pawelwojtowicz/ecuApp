/* gSOAP_DS_DataServiceBindingService.cpp
   Generated by gSOAP 2.8.17r from DataService.soapHeader

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "gSOAP_DS_DataServiceBindingService.h"

DataServiceBindingService::DataServiceBindingService()
{	DataServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

DataServiceBindingService::DataServiceBindingService(const struct soap &_soap) : soap(_soap)
{ }

DataServiceBindingService::DataServiceBindingService(soap_mode iomode)
{	DataServiceBindingService_init(iomode, iomode);
}

DataServiceBindingService::DataServiceBindingService(soap_mode imode, soap_mode omode)
{	DataServiceBindingService_init(imode, omode);
}

DataServiceBindingService::~DataServiceBindingService()
{ }

void DataServiceBindingService::DataServiceBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ds2", "http://wojtech.com.pl/ecuapp/dataservice/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void DataServiceBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void DataServiceBindingService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	DataServiceBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
DataServiceBindingService *DataServiceBindingService::copy()
{	DataServiceBindingService *dup = SOAP_NEW_COPY(DataServiceBindingService(*(struct soap*)this));
	return dup;
}
#endif

int DataServiceBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int DataServiceBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int DataServiceBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int DataServiceBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int DataServiceBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int DataServiceBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void DataServiceBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void DataServiceBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *DataServiceBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void DataServiceBindingService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *DataServiceBindingService::soap_header()
{	return this->header;
}

int DataServiceBindingService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET DataServiceBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET DataServiceBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int DataServiceBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int DataServiceBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ds2__GetServiceStatus(DataServiceBindingService*);
static int serve_ds2__TrackData(DataServiceBindingService*);
static int serve_ds2__ExecuteCommand(DataServiceBindingService*);
static int serve_ds2__GetData(DataServiceBindingService*);

int DataServiceBindingService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ds2:GetServiceStatus"))
		return serve_ds2__GetServiceStatus(this);
	if (!soap_match_tag(this, this->tag, "ds2:TrackData"))
		return serve_ds2__TrackData(this);
	if (!soap_match_tag(this, this->tag, "ds2:ExecuteCommand"))
		return serve_ds2__ExecuteCommand(this);
	if (!soap_match_tag(this, this->tag, "ds2:GetData"))
		return serve_ds2__GetData(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ds2__GetServiceStatus(DataServiceBindingService *soap)
{	struct ds2__GetServiceStatus soap_tmp_ds2__GetServiceStatus;
	struct ds2__GetServiceStatusResponse soap_tmp_ds2__GetServiceStatusResponse;
	soap_default_ds2__GetServiceStatusResponse(soap, &soap_tmp_ds2__GetServiceStatusResponse);
	soap_default_ds2__GetServiceStatus(soap, &soap_tmp_ds2__GetServiceStatus);
	if (!soap_get_ds2__GetServiceStatus(soap, &soap_tmp_ds2__GetServiceStatus, "ds2:GetServiceStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetServiceStatus(soap_tmp_ds2__GetServiceStatusResponse.return_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ds2__GetServiceStatusResponse(soap, &soap_tmp_ds2__GetServiceStatusResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ds2__GetServiceStatusResponse(soap, &soap_tmp_ds2__GetServiceStatusResponse, "ds2:GetServiceStatusResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ds2__GetServiceStatusResponse(soap, &soap_tmp_ds2__GetServiceStatusResponse, "ds2:GetServiceStatusResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ds2__TrackData(DataServiceBindingService *soap)
{	struct ds2__TrackData soap_tmp_ds2__TrackData;
	struct ds2__TrackDataResponse soap_tmp_ds2__TrackDataResponse;
	soap_default_ds2__TrackDataResponse(soap, &soap_tmp_ds2__TrackDataResponse);
	soap_default_ds2__TrackData(soap, &soap_tmp_ds2__TrackData);
	if (!soap_get_ds2__TrackData(soap, &soap_tmp_ds2__TrackData, "ds2:TrackData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->TrackData(soap_tmp_ds2__TrackData._trackItems, soap_tmp_ds2__TrackDataResponse._return_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ds2__TrackDataResponse(soap, &soap_tmp_ds2__TrackDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ds2__TrackDataResponse(soap, &soap_tmp_ds2__TrackDataResponse, "ds2:TrackDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ds2__TrackDataResponse(soap, &soap_tmp_ds2__TrackDataResponse, "ds2:TrackDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ds2__ExecuteCommand(DataServiceBindingService *soap)
{	struct ds2__ExecuteCommand soap_tmp_ds2__ExecuteCommand;
	struct ds2__ExecuteCommandResponse soap_tmp_ds2__ExecuteCommandResponse;
	soap_default_ds2__ExecuteCommandResponse(soap, &soap_tmp_ds2__ExecuteCommandResponse);
	soap_default_ds2__ExecuteCommand(soap, &soap_tmp_ds2__ExecuteCommand);
	if (!soap_get_ds2__ExecuteCommand(soap, &soap_tmp_ds2__ExecuteCommand, "ds2:ExecuteCommand", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ExecuteCommand(soap_tmp_ds2__ExecuteCommand._commandName, soap_tmp_ds2__ExecuteCommand._arguments, soap_tmp_ds2__ExecuteCommandResponse._return_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ds2__ExecuteCommandResponse(soap, &soap_tmp_ds2__ExecuteCommandResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ds2__ExecuteCommandResponse(soap, &soap_tmp_ds2__ExecuteCommandResponse, "ds2:ExecuteCommandResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ds2__ExecuteCommandResponse(soap, &soap_tmp_ds2__ExecuteCommandResponse, "ds2:ExecuteCommandResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ds2__GetData(DataServiceBindingService *soap)
{	struct ds2__GetData soap_tmp_ds2__GetData;
	struct ds2__GetDataResponse soap_tmp_ds2__GetDataResponse;
	soap_default_ds2__GetDataResponse(soap, &soap_tmp_ds2__GetDataResponse);
	soap_default_ds2__GetData(soap, &soap_tmp_ds2__GetData);
	if (!soap_get_ds2__GetData(soap, &soap_tmp_ds2__GetData, "ds2:GetData", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetData(soap_tmp_ds2__GetData._itemName, soap_tmp_ds2__GetDataResponse._return_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ds2__GetDataResponse(soap, &soap_tmp_ds2__GetDataResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ds2__GetDataResponse(soap, &soap_tmp_ds2__GetDataResponse, "ds2:GetDataResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ds2__GetDataResponse(soap, &soap_tmp_ds2__GetDataResponse, "ds2:GetDataResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
